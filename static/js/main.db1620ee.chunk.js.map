{"version":3,"sources":["firebase.js","Content/CreateArtistForm/CreateArtistForm.js","Content/Nav/NavElement.js","Content/Artpiece.js","Content/Nav/Nav.js","Content/Content.js","ShareForm.js","Components/ImageUpload.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","CreateArtistForm","props","handleChange","e","setState","target","name","value","handleSubmit","event","preventDefault","console","log","state","peopleRef","database","ref","person","elements","mediums","description","links","phone","push","prevValue","this","class","onSubmit","for","type","onChange","id","Component","NavElement","Nav","ShareForm","ImageUpload","files","image","handleUpload","put","on","snapshot","progress","Math","round","bytesTransferred","totalBytes","error","child","getDownloadURL","then","url","images","imagesRef","listAll","res","prefixes","forEach","folderRef","items","itemRef","catch","max","onClick","src","alt","height","width","App","React","useReducer","action","dropDepth","inDropZone","fileList","concat","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.db1620ee.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport 'firebase/storage';\n\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBKRvJY99mZ66k_XE5c-uVNHalZB5UdKw0\",\n    authDomain: \"artist-connection-2-u.firebaseapp.com\",\n    databaseURL: \"https://artist-connection-2-u.firebaseio.com\",\n    projectId: \"artist-connection-2-u\",\n    storageBucket: \"artist-connection-2-u.appspot.com\",\n    messagingSenderId: \"419556551471\",\n    appId: \"1:419556551471:web:f5bff6b1fae50f2677cfda\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const storage = firebase.storage();\n\n  \nexport  {\n    storage, firebase as default\n  }\n","import React, {Component} from 'react';\nimport firebase from '../../firebase'\n\nclass CreateArtistForm extends Component{\n    //constructor \n    //initialize state\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            name: '',\n            mediums: [],\n            description: '',\n            links: [],\n            phone: ''\n\n        }\n    }\n    //keep track of input boxes by setting value to state as it updates from user input\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //on submit create reference to firebase reference \n    //create person object defined with user input from form data \n    //push person to database reference \n    //reset state to initial values\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        console.log('Thank you  ' + this.state.name);\n\n        const peopleRef = firebase.database().ref('people');\n\n        const person = {\n            name: event.target.elements.name.value,\n            mediums: event.target.elements.mediums.value,\n            description: event.target.elements.description.value,\n            links: event.target.elements.links.value,\n            phone: event.target.elements.phone.value\n          };\n\n        peopleRef.push(person);\n\n        this.setState(prevValue => ({\n            name: '',\n            mediums: [],\n            description: '',\n            links: [],\n            phone: ''\n          }));\n    }\n\n    //rendering a form \n    //create const refs to state so we are not changing state directly \n\n    render(){\n        const {name} = this.state\n        const {mediums} = this.state\n        const {description} = this.state\n        const {links} = this.state\n        const {phone} = this.state\n\n        return(\n\n            <div class=\"form-style-3\">\n\n            <form onSubmit={this.handleSubmit}>\n                \n                <fieldset>\n                    <legend>Make Page</legend>\n\n                    <label for=\"field1\">\n                        <span>Name <span class=\"required\">*</span> </span> \n                        <input class=\"input-field\" type='text' value={name} name='name' onChange={this.handleChange}/>\n                    </label>\n\n                    <label for=\"field2\">\n                        <span>Contact Email <span class=\"required\">*</span></span>\n                        <input type=\"email\" class=\"input-field\" name=\"field2\" value=\"\" />\n                    </label>\n\n                    <label for=\"field3\">\n                        <span>Phone <span class=\"required\">*</span></span>\n                        <input class=\"input-field\" type='number' value={phone} name='phone' onChange={this.handleChange}/>\n                    </label>\n\n                    <label for=\"field4\">\n                        <span>Mediums </span>\n\n                        <br></br>\n                        <input type=\"checkbox\" id=\"audio\" name=\"audio\" name='mediums' onChange={this.handleChange}/>\n                        <label for=\"audio\">audio</label>\n                        \n\n                        \n                        <input type=\"checkbox\" id=\"visual\" name=\"visual\"/>\n                        <label for=\"visual\">visual</label>\n                        \n\n                        \n                        <input type=\"checkbox\" id=\"wearable\" name=\"wearable\"/>\n                        <label for=\"wearable\">wearable</label>\n                       \n\n                        \n                        <input type=\"checkbox\" id=\"edible\" name=\"edible\"/>\n                        <label for=\"edible\">edible</label>\n                        \n\n                        {/* <select value={mediums} name='mediums' onChange={this.handleChange} class=\"select-field\" multiple>\n                            <option value=\"Audio\">Audio</option>\n                            <option value=\"Visual\">Visual</option>\n                            <option value=\"Wearable\">Wearable</option>\n                            <option value=\"Edible\">Edible</option>\n                        </select> */}\n                    </label>\n                </fieldset>\n\n                <fieldset>\n                    <legend>Hello</legend>\n\n                    <label for=\"field6\">\n                        <span>Description <span class=\"required\">*</span></span>\n                        <textarea class=\"textarea-field\" value={description} name='description' onChange={this.handleChange}></textarea>\n                    </label>\n                    \n                    <label>\n                        <span> </span>\n                        <input type=\"submit\" value=\"Submit\" />\n                    </label>\n\n                </fieldset>\n            </form>\n            </div>\n\n            // <form onSubmit={this.handleSubmit}>\n            //     <label>Name</label>\n            //     <input type='text' value={name} name='name' onChange={this.handleChange}></input>\n\n            //     <label>Mediums</label>\n            //     <input type='text' value={mediums} name='mediums' onChange={this.handleChange}></input>\n\n            //     <label>Description</label>\n            //     <input type='lrgtext' value={description} name='description' onChange={this.handleChange}></input>\n\n            //     <label>Links</label>\n            //     <input type='url' value={links} name='links' onChange={this.handleChange}></input>\n\n            //     <label>Phone</label>\n            //     <input type='tel' value={phone} name='phone' onChange={this.handleChange}></input>\n\n            //     <input type='submit' value='Submit' ></input>\n\n            // </form>\n        )\n    }\n\n}\n\nexport {CreateArtistForm}\n","import React from 'react'\nconst NavElement = () => (\n    <>\n\n    </>\n);\n\nexport {NavElement}","import React, {Component} from 'react'\n\nclass Artpiece extends Component {\n    render(){\n        const {artpiece} = this.props;\n        const year = new Date(artpiece.release_date);\n        const imgPath = artpiece.poster_path;\n\n        return(\n            <div className=\"\">\n                \n                <img src={`https://image.tmdb.org/t/p/w780/${imgPath}`} alt=\"\" height=\"300\" width=\"400\" />\n\n                <div className=\"film-summary\">\n                    <h1>{artpiece.title}</h1>\n                    <p>{artpiece.release_date}</p>\n                </div>\n                \n                \n            </div>\n        )\n    }\n}\n\nexport {Artpiece}","import React from 'react'\nimport {NavElement} from './NavElement'\n\nconst Nav = () => (\n    <>\n    <div>\n        <NavElement/>\n        <span>AUDABLE</span>\n    </div>\n\n    <div>\n    <NavElement/>\n    <span>VISUAL</span>\n    </div>\n\n    <div>\n    <NavElement/>\n    <span>WEARABLE</span>\n    </div>\n\n    <div>\n    <NavElement/>\n    <span>EDIBLE</span>\n    </div>\n\n    <div>\n    <NavElement/>\n    <span>ARTIST LIST</span>\n    </div>\n</>\n\n);\n\nexport {Nav}","import React, {Component} from 'react'\nimport {Artpiece} from './Artpiece'\nimport {Nav} from './Nav/Nav'\n\nclass Content extends Component {\n    render(){\n        const {content} = this.props;\n\n        return(\n            \n            <Nav />\n            // <section>\n\n            //     {\n\n            //         content.map( (artpiece, index) => { \n\n            //             return(\n            //                 <Artpiece key={artpiece.id} artpiece={artpiece}/>\n\n            //             )\n                        \n                        \n            //         })\n                    \n                    \n            //     }\n            // </section>\n        )\n    }\n}\n\nexport {Content}","import React, { useState} from 'react'\nimport firebase from \"./firebase\"\n\n\n    \n\nfunction ShareForm() {\n\n\n    const allInputs = {imgUrl: ''}\n    const [imageAsFile, setInputFile] = useState('')\n    const [imageAsUrl, setImageAsUrl] = useState(allInputs)\n\n\n    console.log(imageAsFile)\n\n    const handleInputFile = (e) => {\n         const image = e.target.files[0]\n         setInputFile(imageFile => (image))\n     }\n   \n     const handleFireBaseUpload = e => {\n       e.preventDefault()\n     console.log('start of upload')\n     // async magic goes here...\n   \n     if(imageAsFile === '' ) {\n       console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\n     }\n     \n     const uploadTask = firebase.storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n     \n     uploadTask.on('state_changed', \n     (snapShot) => {\n       //takes a snap shot of the process as it is happening\n       console.log(snapShot)\n     }, (err) => {\n       //catches the errors\n       console.log(err)\n     }, () => {\n\n       // gets the functions from storage refences the image storage in firebase by the children\n       // gets the download url then sets the image from firebase as the value for the imgUrl key:\n       firebase.storage.ref('images').child(imageAsFile.name).getDownloadURL()\n        .then(fireBaseUrl => {\n          setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\n        })\n     })\n   \n     \n     }\n\n    \n    \n        return(\n            <div>\n                 <form >\n                <input \n                    type = \"file\" \n                    onChange = {handleInputFile}\n                    \n                />\n\n                <button>upload2firebase</button>\n            </form>\n            <img src={imageAsUrl.imgUrl} alt=\"image tag\" />\n            </div>\n           \n        );\n\n\n}\n\nexport default ShareForm;","import React, {Component} from 'react'\nimport {storage} from '../firebase'\n\nclass ImageUpload extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = { \n            image: null,\n            url: '',\n            progress: 0,\n            images: []\n         }\n    }\n\n    handleChange = (e) => {\n        if(e.target.files[0]){\n            //destructuring \n            const image = e.target.files[0];\n            this.setState(() => ({image}));\n        }\n    }\n    handleUpload = () => {\n        const {image} = this.state\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on('state_changed', \n        (snapshot) => {\n            const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n            this.setState({progress});\n        }, \n        (error) => {\n            console.log(error);\n\n        }, \n        () => {\n            storage.ref('images').child(image.name).getDownloadURL().then(url => {\n                \n                this.setState({url});\n            })\n\n        });\n    }\n    render() { \n        var storageRef = storage.ref();\n        var imagesRef = storageRef.child('images')\n        var images = this.state.images\n        var state = this.state\n\n        console.log(imagesRef.listAll());\n\n        imagesRef.listAll().then(function(res) {\n            res.prefixes.forEach(function(folderRef) {\n              // All the prefixes under imagesRef.\n              // You may call listAll() recursively on them.\n              \n            });\n            res.items.forEach(itemRef =>  {\n            this.setState({images: [...images, itemRef]});\n\n              // All the items under imagesRef.\n\n            });\n\n\n          }).catch(function(error) {\n            // Uh-oh, an error occurred!\n          });\n\n          console.log(state);\n\n\n        return ( \n            <div>\n                <progress value = {this.state.progress} max = \"100\"/>\n                <br />\n\n                <input\n                    type = 'file'\n                    onChange = {this.handleChange}\n                    \n                    />\n                <button onClick = {this.handleUpload}>upload</button>\n                <br/>\n                <img src = {this.state.url} alt = 'images' height = '300' width = '400'/>\n            </div>\n         );\n    }\n}\n \nexport {ImageUpload};","import React from 'react';\nimport './App.css';\nimport {CreateArtistForm} from './Content/CreateArtistForm/CreateArtistForm';\n\nimport TADB from './TADB'\nimport {Content} from './Content/Content'\nimport DragAndDrop from './DragAndDrop';\nimport ShareForm from './ShareForm';\nimport {ImageUpload} from './Components/ImageUpload'\n\n\nfunction App() {\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DROP_DEPTH':\n      return { ...state, dropDepth: action.dropDepth }\n    case 'SET_IN_DROP_ZONE':\n      return { ...state, inDropZone: action.inDropZone };\n    case 'ADD_FILE_TO_LIST':\n      return { ...state, fileList: state.fileList.concat(action.files) };\n    default:\n      return state;\n  }\n};\nconst [data, dispatch] = React.useReducer(\n  reducer, { dropDepth: 0, inDropZone: false, fileList: [] }\n)\n\n  return (\n      <div className=\"container\">\n          {/* <div className=\"nav-bar\">\n              <h1 className=\"section-title\">YOU-ARE-HERE</h1>\n              <Nav />\n          </div> */}\n          \n          {/* <div className=\"content\">\n              <h1 className=\"section-title\">CONTENT</h1>\n              <Content content={TADB.artworks}/>\n\n          </div> */}\n          \n          <div className= \"create-page\">\n              <h1 className=\"section-title\">CREATE</h1>\n              <CreateArtistForm />\n          </div>\n\n          {/* <div className= \"drag-and-drop\">\n              <h1 className=\"section-title\">DRAGON DROP</h1>\n              <DragAndDrop data={data} dispatch={dispatch}/>\n              <ol className=\"dropped-files\">\n              {data.fileList.map(f => {\n                return (\n                  <li key={f.name}>{f.name}</li>\n                )\n              })}\n            </ol>\n              \n          </div> */}\n\n          {/* <div className = \"share-page\">\n            <h1 className = \"section-title\"> SHARE </h1>\n            <ShareForm />\n          </div> */}\n\n          <div className = \"share-page\">\n            <h1 className = \"section-title\"> SHARE </h1>\n            <ImageUpload />\n          </div> \n\n\n\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}